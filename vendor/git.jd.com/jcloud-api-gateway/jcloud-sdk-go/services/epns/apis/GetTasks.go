// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    epns "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/epns/models"
)

type GetTasksRequest struct {

    core.JDCloudRequest

    /* Region ID，例如：cn-north-1  */
    RegionId string `json:"regionId"`

    /* 迁移类型：有效值为[0|1]，0：迁入ipfs，1：迁出ipfs,默认为全部 (Optional) */
    MigrationType *int `json:"migrationType"`

    /* 任务状态：有效值为[0|1|2],0:inprogress，1：done，2：error，默认为全部 (Optional) */
    State *int `json:"state"`

    /* 任务数量，取值范围：1-100，默认为100 (Optional) */
    Total *int `json:"total"`

    /* 标示任务列表的起始位置, 默认为从头开始 (Optional) */
    Marker *string `json:"marker"`

    /* 过滤参数，taskId (Optional) */
    Filter *string `json:"filter"`
}

/*
 * param regionId: Region ID，例如：cn-north-1 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetTasksRequest(
    regionId string,
) *GetTasksRequest {

	return &GetTasksRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/tasks",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: Region ID，例如：cn-north-1 (Required)
 * param migrationType: 迁移类型：有效值为[0|1]，0：迁入ipfs，1：迁出ipfs,默认为全部 (Optional)
 * param state: 任务状态：有效值为[0|1|2],0:inprogress，1：done，2：error，默认为全部 (Optional)
 * param total: 任务数量，取值范围：1-100，默认为100 (Optional)
 * param marker: 标示任务列表的起始位置, 默认为从头开始 (Optional)
 * param filter: 过滤参数，taskId (Optional)
 */
func NewGetTasksRequestWithAllParams(
    regionId string,
    migrationType *int,
    state *int,
    total *int,
    marker *string,
    filter *string,
) *GetTasksRequest {

    return &GetTasksRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/tasks",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        MigrationType: migrationType,
        State: state,
        Total: total,
        Marker: marker,
        Filter: filter,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetTasksRequestWithoutParam() *GetTasksRequest {

    return &GetTasksRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/tasks",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID，例如：cn-north-1(Required) */
func (r *GetTasksRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param migrationType: 迁移类型：有效值为[0|1]，0：迁入ipfs，1：迁出ipfs,默认为全部(Optional) */
func (r *GetTasksRequest) SetMigrationType(migrationType int) {
    r.MigrationType = &migrationType
}

/* param state: 任务状态：有效值为[0|1|2],0:inprogress，1：done，2：error，默认为全部(Optional) */
func (r *GetTasksRequest) SetState(state int) {
    r.State = &state
}

/* param total: 任务数量，取值范围：1-100，默认为100(Optional) */
func (r *GetTasksRequest) SetTotal(total int) {
    r.Total = &total
}

/* param marker: 标示任务列表的起始位置, 默认为从头开始(Optional) */
func (r *GetTasksRequest) SetMarker(marker string) {
    r.Marker = &marker
}

/* param filter: 过滤参数，taskId(Optional) */
func (r *GetTasksRequest) SetFilter(filter string) {
    r.Filter = &filter
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetTasksRequest) GetRegionId() string {
    return r.RegionId
}

type GetTasksResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetTasksResult `json:"result"`
}

type GetTasksResult struct {
    TaskInfos []epns.TaskInfo `json:"taskInfos"`
    TotalCount int `json:"totalCount"`
    LastMarker string `json:"lastMarker"`
}